{
	"info": {
		"_postman_id": "9a54a72a-ca2b-4d1c-92ec-d692dd1ea607",
		"name": "ACC Issue API Copy 2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "1440859"
	},
	"item": [
		{
			"name": "Run First",
			"item": [
				{
					"name": "01-GET One Account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"GET Hubs Collection. Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// find the specified project and setup the environment variable \"hub_id\"",
									"const hub_name = pm.variables.get(\"hub_name\");",
									"pm.test(\"find matches account by name: \" + hub_name, function () {",
									"    const body = JSON.parse(responseBody);",
									"    const found = body.data.find(d => d.attributes.name == hub_name);",
									"",
									"    pm.expect(found).to.not.be.undefined;",
									"    ",
									"    pm.environment.set(\"account_id\", found.id);",
									"    pm.environment.set(\"account_id_without_b\", found.id.split(\"b.\").join(\"\"));",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.variables.set(\"hub_name\", \"Developer Advocacy Support\");",
									"",
									"//clean variables that are not preset.",
									"pm.environment.unset(\"account_id\");  ",
									"pm.environment.unset(\"account_id_without_b\");  ",
									"pm.environment.unset(\"project_id\");  ",
									"pm.environment.unset(\"project_id_without_b\");  ",
									"pm.environment.unset(\"assignee_id\");  ",
									"pm.environment.unset(\"one_location_id\");  ",
									"pm.environment.unset(\"one_issue_type_id\");  ",
									"pm.environment.unset(\"one_sub_issue_type_id\");  ",
									"pm.environment.unset(\"text_custom_attribute_id\");  ",
									"pm.environment.unset(\"dropdown_custom_attribute_id\");  ",
									"pm.environment.unset(\"one_dropdown_value\");  ",
									"pm.environment.unset(\"one_root_cause_category_id\");  ",
									"pm.environment.unset(\"one_root_cause_id\");  ",
									"pm.environment.unset(\"one_issue_id\");  ",
									"pm.environment.unset(\"current_date_time\");  ",
									"pm.environment.unset(\"due_date\");  ",
									" pm.environment.unset(\"one_photo_id\");  ",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_domain}}/project/v1/hubs",
							"host": [
								"{{base_domain}}"
							],
							"path": [
								"project",
								"v1",
								"hubs"
							]
						},
						"description": "GET all hubs of your account, and get one hub. Please provide the hub name (hub_name) in environment variables"
					},
					"response": []
				},
				{
					"name": "02-GET One Project",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"GET Projects Collection. Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// find the specified project and setup the environment variable \"hub_id\"",
									"const project_name = pm.variables.get(\"project_name\");",
									"pm.test(\"find matches account by name: \" + project_name, function () {",
									"    const body = JSON.parse(responseBody);",
									"    const found = body.data.find(d => d.attributes.name == project_name);",
									"",
									"    pm.expect(found).to.not.be.undefined;",
									"    ",
									"    pm.environment.set(\"project_id\", found.id);",
									"    pm.environment.set(\"project_id_without_b\", found.id.split(\"b.\").join(\"\"));",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.variables.set(\"project_name\", \"Centric Hospital\");",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_domain}}/project/v1/hubs/b.{{account_id_without_b}}/projects",
							"host": [
								"{{base_domain}}"
							],
							"path": [
								"project",
								"v1",
								"hubs",
								"b.{{account_id_without_b}}",
								"projects"
							]
						},
						"description": "GET all projects of one hub, and get one project Please provide the hub name (project_name) in environment variables"
					},
					"response": []
				},
				{
					"name": "03-Get One Project User Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get project users collection, Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//get first user",
									" var body = JSON.parse(responseBody);",
									"",
									"pm.environment.set(\"assignee_id\",body.results[1].autodeskId );",
									" ",
									"     "
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_domain}}/construction/admin/v1/projects/{{project_id_without_b}}/users",
							"host": [
								"{{base_domain}}"
							],
							"path": [
								"construction",
								"admin",
								"v1",
								"projects",
								"{{project_id_without_b}}",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "04-GET One Location",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get locations collection, Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									" ",
									"pm.test(\"get one location id: \", function () {",
									"    var body = JSON.parse(responseBody);",
									"",
									"    pm.expect(body.results).not.eq(undefined); ",
									"",
									"    ",
									"    //the first location ",
									"    pm.environment.set(\"one_location_id\", body.results[1].id);",
									"     ",
									"});",
									"",
									"     "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{base_domain}}/construction/locations/v2/projects/:projectId/trees/default/nodes",
							"host": [
								"{{base_domain}}"
							],
							"path": [
								"construction",
								"locations",
								"v2",
								"projects",
								":projectId",
								"trees",
								"default",
								"nodes"
							],
							"query": [
								{
									"key": "limit",
									"value": "2",
									"description": "<input a limit in 2-200>",
									"disabled": true
								},
								{
									"key": "offset",
									"value": "5",
									"description": "<input a offset in 2-200>",
									"disabled": true
								},
								{
									"key": "filter[isActive]",
									"value": "true",
									"disabled": true
								},
								{
									"key": "filter[createdBy]",
									"value": "System",
									"description": "user id. 'System' is the default system",
									"disabled": true
								},
								{
									"key": "filter[createdAt]",
									"value": "2021-03-04...",
									"description": "ISO 8601 time",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "projectId",
									"value": "{{project_id_without_b}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "API References",
			"item": [
				{
					"name": "User @ Me",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get User@Me, Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"}); ",
									"",
									"pm.test(\"get user id \", function () {",
									"    var body = JSON.parse(responseBody);  ",
									"    pm.expect(body).not.eq(undefined); ",
									"    pm.environment.set(\"creator_id\", body.id); ",
									"    ",
									"});  "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text",
								"disabled": true
							},
							{
								"key": "userId",
								"value": "200902260532621",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{base_domain}}/construction/issues/v1/projects/:projectId/users/me",
							"host": [
								"{{base_domain}}"
							],
							"path": [
								"construction",
								"issues",
								"v1",
								"projects",
								":projectId",
								"users",
								"me"
							],
							"query": [
								{
									"key": "page[limit]",
									"value": "200",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "projectId",
									"value": "{{project_id_without_b}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Issues Types",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get issue types collection, Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									" ",
									"pm.test(\"get one issue sub type id: \", function () {",
									"    var body = JSON.parse(responseBody);",
									"",
									"    //the first issue type that contains sub types",
									"    var find = body.results.find(i=>i.subtypes.length>0)",
									"    pm.environment.set(\"one_issue_type_id\", find.id);",
									"    if(find){",
									"        pm.environment.set(\"one_sub_issue_type_id\", find.subtypes[0].id); ",
									"",
									"    }else{",
									"        pm.environment.set(\"one_sub_issue_type_id\", \"\"); ",
									"    } ",
									"    ",
									"});",
									"",
									"     "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{base_domain}}/construction/issues/v1/projects/:projectId/issue-types?include=subtypes&filter[title]=xiaodong-type-category",
							"host": [
								"{{base_domain}}"
							],
							"path": [
								"construction",
								"issues",
								"v1",
								"projects",
								":projectId",
								"issue-types"
							],
							"query": [
								{
									"key": "include",
									"value": "subtypes"
								},
								{
									"key": "limit",
									"value": "2",
									"description": "<input a limit in 2-200>",
									"disabled": true
								},
								{
									"key": "offset",
									"value": "5",
									"description": "<input a offset in 2-200>",
									"disabled": true
								},
								{
									"key": "filter[isActive]",
									"value": "true",
									"disabled": true
								},
								{
									"key": "filter[createdBy]",
									"value": "System",
									"description": "user id. 'System' is the default system",
									"disabled": true
								},
								{
									"key": "filter[createdAt]",
									"value": "2021-03-04...",
									"description": "ISO 8601 time",
									"disabled": true
								},
								{
									"key": "filter[title]",
									"value": "xiaodong-type-category",
									"description": "search by title"
								}
							],
							"variable": [
								{
									"key": "projectId",
									"value": "{{project_id_without_b}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET issue-attribute-definitions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get custom attributes definitions, Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Get custom definitions ids: \", function () {",
									"    var body = JSON.parse(responseBody);",
									"    var find = body.results",
									"",
									"    pm.expect(find).not.eq(undefined); ",
									"    ",
									"    if(find){",
									"        //get all ids of custom attributes definitions",
									"        //assume at least 3 custom attributes types are available: text, date, dropdown",
									"        var text_custom_attribute_id = find.find(i=>i.dataType == \"text\").id",
									"        var dropdown_custom_attribute_id = find.find(i=>i.dataType == \"list\").id ",
									"        var one_dropdown_value = find.find(i=>i.dataType == \"list\").metadata.list.options[0].id;",
									"",
									"        pm.environment.set(\"text_custom_attribute_id\", text_custom_attribute_id); ",
									"       ",
									"        pm.environment.set(\"dropdown_custom_attribute_id\", dropdown_custom_attribute_id); ",
									"        pm.environment.set(\"one_dropdown_value\", one_dropdown_value); ",
									"",
									"    }else{",
									"        ",
									"    }",
									"    ",
									"});",
									"",
									"     "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_domain}}/construction/issues/v1/projects/:projectId/issue-attribute-definitions",
							"host": [
								"{{base_domain}}"
							],
							"path": [
								"construction",
								"issues",
								"v1",
								"projects",
								":projectId",
								"issue-attribute-definitions"
							],
							"query": [
								{
									"key": "limit",
									"value": "2",
									"description": "input a limit in 2-200",
									"disabled": true
								},
								{
									"key": "offset",
									"value": "5",
									"description": "input a offset in 1-200",
									"disabled": true
								},
								{
									"key": "filter[dataType]",
									"value": "text",
									"description": "available: numeric,text,paragraph,list",
									"disabled": true
								},
								{
									"key": "filter[createdBy]",
									"value": "200902260532621",
									"description": "user id",
									"disabled": true
								},
								{
									"key": "filter[createdAt]",
									"value": "2022-03-08...",
									"description": "ISO 8601 time",
									"disabled": true
								},
								{
									"key": "filter[title]",
									"value": "numeric-demo",
									"description": "search by title",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "projectId",
									"value": "{{project_id_without_b}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET issue-attribute-mappings",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{base_domain}}/construction/issues/v1/projects/:projectId/issue-attribute-mappings",
							"host": [
								"{{base_domain}}"
							],
							"path": [
								"construction",
								"issues",
								"v1",
								"projects",
								":projectId",
								"issue-attribute-mappings"
							],
							"query": [
								{
									"key": "limit",
									"value": "2",
									"description": "input a limit in 2-200",
									"disabled": true
								},
								{
									"key": "offset",
									"value": "5",
									"description": "input a offset in 1-200",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "projectId",
									"value": "{{project_id_without_b}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET issue-root-cause-categories",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get root causes collection, Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									" ",
									"pm.test(\"get one root cause id: \", function () {",
									"    var body = JSON.parse(responseBody);",
									"",
									"    //the first root cause category that contains root  cause",
									"    var find = body.results.find(i=>i.rootCauses.length>0)",
									"    pm.environment.set(\"one_root_cause_category_id\", find.id);",
									"    if(find){",
									"        pm.environment.set(\"one_root_cause_id\", find.rootCauses[0].id); ",
									"",
									"    }else{",
									"        pm.environment.set(\"one_root_cause_id\", \"\"); ",
									"    } ",
									"    ",
									"});",
									"",
									"     "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{base_domain}}/construction/issues/v1/projects/:projectId/issue-root-cause-categories?include=rootcauses",
							"host": [
								"{{base_domain}}"
							],
							"path": [
								"construction",
								"issues",
								"v1",
								"projects",
								":projectId",
								"issue-root-cause-categories"
							],
							"query": [
								{
									"key": "limit",
									"value": "2",
									"description": "input a limit in 2-200",
									"disabled": true
								},
								{
									"key": "offset",
									"value": "5",
									"description": "input a offset in 1-200",
									"disabled": true
								},
								{
									"key": "filter[createdBy]",
									"value": "System",
									"description": "user id. 'System' is the id of default",
									"disabled": true
								},
								{
									"key": "filter[createdAt]",
									"value": "2022-03-08...",
									"description": "ISO 8601 time",
									"disabled": true
								},
								{
									"key": "filter[title]",
									"value": "Design",
									"description": "search by title",
									"disabled": true
								},
								{
									"key": "include",
									"value": "rootcauses"
								}
							],
							"variable": [
								{
									"key": "projectId",
									"value": "{{project_id_without_b}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Issues",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get issues collection, Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									" ",
									"pm.test(\"get one issue id: \", function () {",
									"    var body = JSON.parse(responseBody);",
									"    if(body.results && body.results.length>0)",
									"    pm.environment.set(\"one_issue_id\", body.results[0].id); ",
									"    ",
									"});",
									"",
									"     "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_domain}}/construction/issues/v1/projects/:projectId/issues",
							"host": [
								"{{base_domain}}"
							],
							"path": [
								"construction",
								"issues",
								"v1",
								"projects",
								":projectId",
								"issues"
							],
							"query": [
								{
									"key": "limit",
									"value": "2",
									"description": "input a limit in 2-200",
									"disabled": true
								},
								{
									"key": "offset",
									"value": "5",
									"description": "<input a offset in 2-200>",
									"disabled": true
								},
								{
									"key": "filter[createdBy]",
									"value": "H525MUVW4AAB",
									"description": "user Id",
									"disabled": true
								},
								{
									"key": "filter[dueDate]",
									"value": "2022-01-14...",
									"description": "ISO8601. Three dots with date range",
									"disabled": true
								},
								{
									"key": "filter[deleted]",
									"value": "false",
									"disabled": true
								},
								{
									"key": "filter[createdAt]",
									"value": "2022-01-14...",
									"description": "ISO8601",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "projectId",
									"value": "{{project_id_without_b}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET One Issue",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get issues collection, Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									" ",
									"pm.test(\"get one issue id: \", function () {",
									"    var body = JSON.parse(responseBody);",
									"    if(body.results && body.results.length>0)",
									"    pm.environment.set(\"one_issue_id\", body.results[0].id); ",
									"    ",
									"});",
									"",
									"     "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_domain}}/construction/issues/v1/projects/:projectId/issues/:issueId",
							"host": [
								"{{base_domain}}"
							],
							"path": [
								"construction",
								"issues",
								"v1",
								"projects",
								":projectId",
								"issues",
								":issueId"
							],
							"variable": [
								{
									"key": "projectId",
									"value": "{{project_id_without_b}}"
								},
								{
									"key": "issueId",
									"value": "{{one_issue_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Issue-Basic",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var d = new Date()",
									"var current_date_time = d.getFullYear() ",
									"                +\"-\" + ((\"0\" + (d.getUTCMonth()+1)).slice(-2) )",
									"                + \"-\" +  (\"0\" + d.getUTCDate()).slice(-2)",
									"pm.environment.set(\"current_date_time\", current_date_time);",
									"",
									"d.setUTCMinutes(d.getUTCDay()+10) //set due date  ",
									"",
									"var due_date = d.getUTCFullYear() ",
									"                +\"-\" + ((\"0\" + (d.getUTCMonth()+1)).slice(-2) )",
									"                + \"-\" +  (\"0\" + d.getUTCDate()).slice(-2)  ",
									"pm.environment.set(\"due_date\", due_date);",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"create issues, Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									" ",
									"pm.test(\"get one issue id: \", function () {",
									"    var body = JSON.parse(responseBody);",
									"    pm.environment.set(\"one_issue_id\", body.id); ",
									"    ",
									"});",
									"",
									"     "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n        \"title\": \"[{{current_date_time}}]create issue by API- assign to one user\",\n        \"description\": \"create issue by {{creator_id}}- assign to one user{{assignee_id}}\",\n        \"status\": \"open\",\n        \"assignedTo\": \"{{assignee_id}}\",\n        \"assignedToType\": \"user\",\n        \"dueDate\": \"{{due_date}}\",\n        \"issueSubtypeId\":\"{{one_sub_issue_type_id}}\", \n        \"rootCauseId\":\"{{one_root_cause_id}}\",\n        \"locationId\":\"{{one_location_id}}\"\n\n}"
						},
						"url": {
							"raw": "{{base_domain}}/construction/issues/v1/projects/:projectId/issues",
							"host": [
								"{{base_domain}}"
							],
							"path": [
								"construction",
								"issues",
								"v1",
								"projects",
								":projectId",
								"issues"
							],
							"query": [
								{
									"key": "page[limit]",
									"value": "200",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "projectId",
									"value": "{{project_id_without_b}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Issue-with Custom Attribute",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"create issues with custom attribute, Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									" "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n        \"title\": \"[{{current_date_time}}]create issue by API- assign to one user\",\n        \"description\": \"create issue by API- assign to one user\",\n        \"status\": \"open\",\n        \"assignedTo\": \"{{assignee_id}}\",\n        \"assignedToType\": \"user\",\n        \"dueDate\": \"{{due_date}}\",\n        \"issueSubtypeId\":\"{{one_sub_issue_type_id}}\",\n        \"rootCauseId\":\"{{one_root_cause_id}}\",\n        \"locationId\":\"{{one_location_id}}\",\n\n\n        \"customAttributes\": [\n          {\n            \"attributeDefinitionId\": \"{{text_custom_attribute_id}}\",\n            \"value\": \"demo values of custom attribute\"\n          },\n          {\n            \"attributeDefinitionId\": \"{{dropdown_custom_attribute_id}}\",\n            \"value\": \"{{one_dropdown_value}}\"\n          } \n        ]\n}\n "
						},
						"url": {
							"raw": "{{base_domain}}/construction/issues/v1/projects/:projectId/issues",
							"host": [
								"{{base_domain}}"
							],
							"path": [
								"construction",
								"issues",
								"v1",
								"projects",
								":projectId",
								"issues"
							],
							"variable": [
								{
									"key": "projectId",
									"value": "{{project_id_without_b}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCH Issue-Basic",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Patch one issue. Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									" "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var d = new Date()",
									"var current_date_time = d.getFullYear() ",
									"                +\"-\" + ((\"0\" + (d.getUTCMonth()+1)).slice(-2) )",
									"                + \"-\" +  (\"0\" + d.getUTCDate()).slice(-2)",
									"pm.environment.set(\"current_date_time\", current_date_time);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n        \"title\": \"Patch issue by {{creator_id}} at {{current_date_time}}\",\n        \"description\": \"patch one issue by {{creator_id}} at {{current_date_time}}\",\n        \"status\": \"closed\"\n}"
						},
						"url": {
							"raw": "{{base_domain}}/construction/issues/v1/projects/:projectId/issues/:issueId",
							"host": [
								"{{base_domain}}"
							],
							"path": [
								"construction",
								"issues",
								"v1",
								"projects",
								":projectId",
								"issues",
								":issueId"
							],
							"variable": [
								{
									"key": "projectId",
									"value": "{{project_id_without_b}}"
								},
								{
									"key": "issueId",
									"value": "{{one_issue_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCH Issue-with Custom Attributes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Patch one issue with custom attributes. Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									" "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var d = new Date()",
									"var current_date_time = d.getFullYear() ",
									"                +\"-\" + ((\"0\" + (d.getUTCMonth()+1)).slice(-2) )",
									"                + \"-\" +  (\"0\" + d.getUTCDate()).slice(-2)",
									"pm.environment.set(\"current_date_time\", current_date_time);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n       \"title\": \"Patch issue by {{creator_id}} at {{current_date_time}} with custom attributes\",\n        \"description\": \"patch one issue by {{creator_id}} at {{current_date_time}} with custom attributes\",\n        \"status\": \"closed\",\n        \"customAttributes\": [\n          {\n            \"attributeDefinitionId\": \"{{text_custom_attribute_id}}\",\n            \"value\": \"patch issue: demo values of custom attribute\"\n          },\n          {\n            \"attributeDefinitionId\": \"{{dropdown_custom_attribute_id}}\",\n            \"value\": \"{{one_dropdown_value}}\"\n          }\n        ]\n}"
						},
						"url": {
							"raw": "{{base_domain}}/construction/issues/v1/projects/:projectId/issues/:issueId",
							"host": [
								"{{base_domain}}"
							],
							"path": [
								"construction",
								"issues",
								"v1",
								"projects",
								":projectId",
								"issues",
								":issueId"
							],
							"query": [
								{
									"key": "page[limit]",
									"value": "200",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "projectId",
									"value": "9563e750-18ed-43f7-a415-bf17d5d0051d"
								},
								{
									"key": "issueId",
									"value": "d0cdcd31-6dcb-458e-b12b-5929a9fed2a8"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCH Issue-with Published",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Patch one issue with custom attributes. Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									" "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var d = new Date()",
									"var current_date_time = d.getFullYear() ",
									"                +\"-\" + ((\"0\" + (d.getUTCMonth()+1)).slice(-2) )",
									"                + \"-\" +  (\"0\" + d.getUTCDate()).slice(-2)",
									"pm.environment.set(\"current_date_time\", current_date_time);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n       \"title\": \"Patch issue by {{creator_id}} at {{current_date_time}} with published\",\n        \"description\": \"patch one issue by {{creator_id}} at {{current_date_time}} with published\",\n        \"published\": false\n}"
						},
						"url": {
							"raw": "{{base_domain}}/construction/issues/v1/projects/:projectId/issues/:issueId",
							"host": [
								"{{base_domain}}"
							],
							"path": [
								"construction",
								"issues",
								"v1",
								"projects",
								":projectId",
								"issues",
								":issueId"
							],
							"query": [
								{
									"key": "page[limit]",
									"value": "200",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "projectId",
									"value": "9563e750-18ed-43f7-a415-bf17d5d0051d"
								},
								{
									"key": "issueId",
									"value": "{{one_issue_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Comments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"get one issue comments collection. Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									" "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_domain}}/construction/issues/v1/projects/:projectId/issues/:issueId/comments",
							"host": [
								"{{base_domain}}"
							],
							"path": [
								"construction",
								"issues",
								"v1",
								"projects",
								":projectId",
								"issues",
								":issueId",
								"comments"
							],
							"variable": [
								{
									"key": "projectId",
									"value": "{{project_id_without_b}}"
								},
								{
									"key": "issueId",
									"value": "{{one_issue_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Comment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"create comment for one issue. Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									" "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var d = new Date()",
									"var current_date_time = d.getFullYear() ",
									"                +\"-\" + ((\"0\" + (d.getUTCMonth()+1)).slice(-2) )",
									"                + \"-\" +  (\"0\" + d.getUTCDate()).slice(-2)",
									"pm.environment.set(\"current_date_time\", current_date_time);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n        \"issueId\": \"{{one_issue_id}}\",\n        \"body\": \"This is a comment created by API by {{creator_id}} at {{current_date_time}}.\"\n }"
						},
						"url": {
							"raw": "{{base_domain}}/construction/issues/v1/projects/:projectId/issues/:issueId/comments",
							"host": [
								"{{base_domain}}"
							],
							"path": [
								"construction",
								"issues",
								"v1",
								"projects",
								":projectId",
								"issues",
								":issueId",
								"comments"
							],
							"variable": [
								{
									"key": "projectId",
									"value": "{{project_id_without_b}}"
								},
								{
									"key": "issueId",
									"value": "{{one_issue_id}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Additional Test",
			"item": [
				{
					"name": "01-Get One Photo Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get One Photo Id, Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Photos collection is not null\", function () {",
									"    var body = JSON.parse(responseBody);",
									"    var find = body.results;",
									"",
									"    pm.expect(find).not.eq(undefined); ",
									"",
									"     if(find && find.length>0)",
									"        pm.environment.set(\"one_photo_id\",find[0].id); ",
									"     ",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{base_domain}}/construction/photos/v1/projects/:projectId/photos:filter",
							"host": [
								"{{base_domain}}"
							],
							"path": [
								"construction",
								"photos",
								"v1",
								"projects",
								":projectId",
								"photos:filter"
							],
							"variable": [
								{
									"key": "projectId",
									"value": "{{project_id_without_b}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "02-Add Reference of Issue with Photo",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Add Reference of Issue with Photo, Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									" "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n           {\n             \"entities\": [\n               {\n                 \"domain\": \"autodesk-bim360-issue\",\n                 \"type\": \"issue\",\n                 \"id\": \"{{one_issue_id}}\"\n               },\n               {\n                 \"domain\": \"autodesk-construction-photo\",\n                 \"type\": \"photo\",\n                 \"id\": \"{{one_photo_id}}\" \n               }\n             ]\n           }\n         ]"
						},
						"url": {
							"raw": "{{base_domain}}/bim360/relationship/v2/containers/:containerId/relationships",
							"host": [
								"{{base_domain}}"
							],
							"path": [
								"bim360",
								"relationship",
								"v2",
								"containers",
								":containerId",
								"relationships"
							],
							"variable": [
								{
									"key": "containerId",
									"value": "{{project_id_without_b}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "03-Search Relationship of Issues and Photos",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Search Relationship with Domain and Type - Asset, Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"relationships is not null\", function () {",
									"    var body = JSON.parse(responseBody);",
									"    var find = body.relationships;",
									"",
									"    pm.expect(find).not.eq(undefined); ",
									"     ",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_domain}}/bim360/relationship/v2/containers/:projectId/relationships:search?domain=autodesk-bim360-issue&type=issue&id={{one_issue_id}}&withDomain=autodesk-construction-photo&withType=photo",
							"host": [
								"{{base_domain}}"
							],
							"path": [
								"bim360",
								"relationship",
								"v2",
								"containers",
								":projectId",
								"relationships:search"
							],
							"query": [
								{
									"key": "domain",
									"value": "autodesk-bim360-issue"
								},
								{
									"key": "type",
									"value": "issue"
								},
								{
									"key": "id",
									"value": "{{one_issue_id}}"
								},
								{
									"key": "withDomain",
									"value": "autodesk-construction-photo"
								},
								{
									"key": "withType",
									"value": "photo"
								}
							],
							"variable": [
								{
									"key": "projectId",
									"value": "{{project_id_without_b}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "04-Supported Relationships to Create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_domain}}/bim360/relationship/v2/utility/relationships:writable",
							"host": [
								"{{base_domain}}"
							],
							"path": [
								"bim360",
								"relationship",
								"v2",
								"utility",
								"relationships:writable"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Webhook",
			"item": [
				{
					"name": "Step 1 : Find the Scope ID for Events",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get User@Me, Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"}); ",
									"",
									"pm.test(\"get user id \", function () {",
									"    var body = JSON.parse(responseBody);  ",
									"    pm.expect(body).not.eq(undefined); ",
									"    pm.environment.set(\"creator_id\", body.id); ",
									"    ",
									"});  "
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "VIEW",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text",
								"disabled": true
							},
							{
								"key": "userId",
								"value": "200902260532621",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "In the scripts of Run First,   Prepare valid ProjectId. Ensure logged user is project admin",
							"host": [
								"In the scripts of Run First,   Prepare valid ProjectId",
								" Ensure logged user is project admin"
							],
							"query": [
								{
									"key": "page[limit]",
									"value": "200",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Step 2 : Prepare to Manage Callbacks",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get User@Me, Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"}); ",
									"",
									"pm.test(\"get user id \", function () {",
									"    var body = JSON.parse(responseBody);  ",
									"    pm.expect(body).not.eq(undefined); ",
									"    pm.environment.set(\"creator_id\", body.id); ",
									"    ",
									"});  "
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "VIEW",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text",
								"disabled": true
							},
							{
								"key": "userId",
								"value": "200902260532621",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "Create your own callback, or webhook hubs such as RequestBin. Get the callback url.",
							"host": [
								"Create your own callback, or webhook hubs such as RequestBin",
								" Get the callback url",
								""
							],
							"query": [
								{
									"key": "page[limit]",
									"value": "200",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Step 3 : Create a Webhook",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get User@Me, Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"}); ",
									"",
									"pm.test(\"get user id \", function () {",
									"    var body = JSON.parse(responseBody);  ",
									"    pm.expect(body).not.eq(undefined); ",
									"    pm.environment.set(\"creator_id\", body.id); ",
									"    ",
									"});  "
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n           \"callbackUrl\": \"http://bf067e05.ngrok.io/callback\",\n           \"scope\": {\n             \"project\": \"{{project_id}}\"\n           },\n           \"hookAttribute\": {\n             \"MyTestData\": {\"test1\":123}\n           }\n         } ",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://developer.api.autodesk.com/webhooks/v1/systems/autodesk.construction.issues/events/issue.created-1.0/hooks",
							"protocol": "https",
							"host": [
								"developer",
								"api",
								"autodesk",
								"com"
							],
							"path": [
								"webhooks",
								"v1",
								"systems",
								"autodesk.construction.issues",
								"events",
								"issue.created-1.0",
								"hooks"
							],
							"query": [
								{
									"key": "page[limit]",
									"value": "200",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Step 4: watch your callback",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get User@Me, Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"}); ",
									"",
									"pm.test(\"get user id \", function () {",
									"    var body = JSON.parse(responseBody);  ",
									"    pm.expect(body).not.eq(undefined); ",
									"    pm.environment.set(\"creator_id\", body.id); ",
									"    ",
									"});  "
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "VIEW",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text",
								"disabled": true
							},
							{
								"key": "userId",
								"value": "200902260532621",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "watch your callback. When the event is triggered, get the information you want to check. See blog for more details: https://aps.autodesk.com/blog/webhook-api-acc-issue-released",
							"protocol": "watch your callback. When the event is triggered, get the information you want to check. See blog for more details: https",
							"host": [
								"aps",
								"autodesk",
								"com"
							],
							"path": [
								"blog",
								"webhook-api-acc-issue-released"
							],
							"query": [
								{
									"key": "page[limit]",
									"value": "200",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "oauth2",
		"oauth2": [
			{
				"key": "scope",
				"value": "data:read data:write account:read",
				"type": "string"
			},
			{
				"key": "client_authentication",
				"value": "body",
				"type": "string"
			},
			{
				"key": "clientSecret",
				"value": "{{client_secret}}",
				"type": "string"
			},
			{
				"key": "clientId",
				"value": "{{client_id}}",
				"type": "string"
			},
			{
				"key": "accessTokenUrl",
				"value": "https://developer.api.autodesk.com/authentication/v2/token",
				"type": "string"
			},
			{
				"key": "authUrl",
				"value": "https://developer.api.autodesk.com/authentication/v2/authorize",
				"type": "string"
			},
			{
				"key": "redirect_uri",
				"value": "https://www.getpostman.com/oauth2/callback",
				"type": "string"
			},
			{
				"key": "tokenName",
				"value": "access_token",
				"type": "string"
			},
			{
				"key": "addTokenTo",
				"value": "header",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}